{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matas\\\\Desktop\\\\Serverland\\\\Frontend\\\\src\\\\pages\\\\PartsPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport config from '../config';\nimport { useAuth } from '../context/AuthContext';\nimport './PartsPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PartsPage = () => {\n  _s();\n  const {\n    categoryId,\n    serverId\n  } = useParams(); // Extract categoryId and serverId from the URL\n  const [parts, setParts] = useState([]); // State to store parts\n  const {\n    waitForAccessToken\n  } = useAuth(); // Access the authentication context\n\n  // Fetch parts based on serverId when the component mounts or when serverId changes\n  useEffect(() => {\n    const fetchParts = async () => {\n      try {\n        const token = await waitForAccessToken();\n        const response = await axios.get(`${config.apiBaseUrl}/api/category/${categoryId}/server/${serverId}/part`,\n        // API endpoint to fetch parts for the server\n        {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setParts(response.data); // Set the parts in the state\n      } catch (error) {\n        console.error('Error fetching parts:', error);\n      }\n    };\n    if (serverId) {\n      fetchParts(); // Fetch parts when serverId is available\n    }\n  }, [serverId, categoryId, waitForAccessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"parts-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Parts for Server \", serverId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parts-list\",\n      children: parts.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No parts available for this server.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this) : parts.map(part => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"part-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"CPU: \", part.cpu]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"RAM: \", part.ram, \" GB\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Raid: \", part.raid]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Network: \", part.network]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"SSD: \", part.ssd, \" GB\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"HDD: \", part.hdd, \" GB\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"PSU: \", part.psu, \" W\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Rails: \", part.rails]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this)]\n      }, part.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(PartsPage, \"VN+dukeYQL11YZmDQTPGPJwSNWc=\", false, function () {\n  return [useParams, useAuth];\n});\n_c = PartsPage;\nexport default PartsPage;\nvar _c;\n$RefreshReg$(_c, \"PartsPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","config","useAuth","jsxDEV","_jsxDEV","PartsPage","_s","categoryId","serverId","parts","setParts","waitForAccessToken","fetchParts","token","response","get","apiBaseUrl","headers","Authorization","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","part","cpu","ram","raid","network","ssd","hdd","psu","rails","id","_c","$RefreshReg$"],"sources":["C:/Users/matas/Desktop/Serverland/Frontend/src/pages/PartsPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport config from '../config';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport './PartsPage.css';\r\n\r\nconst PartsPage = () => {\r\n  const { categoryId, serverId } = useParams(); // Extract categoryId and serverId from the URL\r\n  const [parts, setParts] = useState([]); // State to store parts\r\n  const { waitForAccessToken } = useAuth(); // Access the authentication context\r\n\r\n  // Fetch parts based on serverId when the component mounts or when serverId changes\r\n  useEffect(() => {\r\n    const fetchParts = async () => {\r\n      try {\r\n        const token = await waitForAccessToken();\r\n        const response = await axios.get(\r\n          `${config.apiBaseUrl}/api/category/${categoryId}/server/${serverId}/part`, // API endpoint to fetch parts for the server\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        );\r\n        setParts(response.data); // Set the parts in the state\r\n      } catch (error) {\r\n        console.error('Error fetching parts:', error);\r\n      }\r\n    };\r\n\r\n    if (serverId) {\r\n      fetchParts(); // Fetch parts when serverId is available\r\n    }\r\n  }, [serverId, categoryId, waitForAccessToken]);\r\n\r\n  return (\r\n    <div className=\"parts-page\">\r\n      <h2>Parts for Server {serverId}</h2>\r\n\r\n      <div className=\"parts-list\">\r\n        {parts.length === 0 ? (\r\n          <p>No parts available for this server.</p>\r\n        ) : (\r\n          parts.map((part) => (\r\n            <div key={part.id} className=\"part-item\">\r\n              <h3>CPU: {part.cpu}</h3>\r\n              <p>RAM: {part.ram} GB</p>\r\n              <p>Raid: {part.raid}</p>\r\n              <p>Network: {part.network}</p>\r\n              <p>SSD: {part.ssd} GB</p>\r\n              <p>HDD: {part.hdd} GB</p>\r\n              <p>PSU: {part.psu} W</p>\r\n              <p>Rails: {part.rails}</p>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PartsPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,OAAO,QAAQ,wBAAwB;AAChD,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC,UAAU;IAAEC;EAAS,CAAC,GAAGT,SAAS,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM;IAAEa;EAAmB,CAAC,GAAGT,OAAO,CAAC,CAAC,CAAC,CAAC;;EAE1C;EACAL,SAAS,CAAC,MAAM;IACd,MAAMe,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,KAAK,GAAG,MAAMF,kBAAkB,CAAC,CAAC;QACxC,MAAMG,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAC9B,GAAGd,MAAM,CAACe,UAAU,iBAAiBT,UAAU,WAAWC,QAAQ,OAAO;QAAE;QAC3E;UACES,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUL,KAAK;UAAG;QAC9C,CACF,CAAC;QACDH,QAAQ,CAACI,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAED,IAAIZ,QAAQ,EAAE;MACZI,UAAU,CAAC,CAAC,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACJ,QAAQ,EAAED,UAAU,EAAEI,kBAAkB,CAAC,CAAC;EAE9C,oBACEP,OAAA;IAAKkB,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzBnB,OAAA;MAAAmB,QAAA,GAAI,mBAAiB,EAACf,QAAQ;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEpCvB,OAAA;MAAKkB,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxBd,KAAK,CAACmB,MAAM,KAAK,CAAC,gBACjBxB,OAAA;QAAAmB,QAAA,EAAG;MAAmC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GAE1ClB,KAAK,CAACoB,GAAG,CAAEC,IAAI,iBACb1B,OAAA;QAAmBkB,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACtCnB,OAAA;UAAAmB,QAAA,GAAI,OAAK,EAACO,IAAI,CAACC,GAAG;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxBvB,OAAA;UAAAmB,QAAA,GAAG,OAAK,EAACO,IAAI,CAACE,GAAG,EAAC,KAAG;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACzBvB,OAAA;UAAAmB,QAAA,GAAG,QAAM,EAACO,IAAI,CAACG,IAAI;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxBvB,OAAA;UAAAmB,QAAA,GAAG,WAAS,EAACO,IAAI,CAACI,OAAO;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9BvB,OAAA;UAAAmB,QAAA,GAAG,OAAK,EAACO,IAAI,CAACK,GAAG,EAAC,KAAG;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACzBvB,OAAA;UAAAmB,QAAA,GAAG,OAAK,EAACO,IAAI,CAACM,GAAG,EAAC,KAAG;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACzBvB,OAAA;UAAAmB,QAAA,GAAG,OAAK,EAACO,IAAI,CAACO,GAAG,EAAC,IAAE;QAAA;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACxBvB,OAAA;UAAAmB,QAAA,GAAG,SAAO,EAACO,IAAI,CAACQ,KAAK;QAAA;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GARlBG,IAAI,CAACS,EAAE;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASZ,CACN;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACrB,EAAA,CAnDID,SAAS;EAAA,QACoBN,SAAS,EAEXG,OAAO;AAAA;AAAAsC,EAAA,GAHlCnC,SAAS;AAqDf,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}