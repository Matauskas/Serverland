{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matas\\\\Desktop\\\\Serverland\\\\Frontend\\\\src\\\\pages\\\\ServerPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport config from '../config';\nimport { useAuth } from '../context/AuthContext';\nimport './ServerPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ServersPage = () => {\n  _s();\n  const {\n    categoryId\n  } = useParams(); // Extract categoryId from the URL\n  const [servers, setServers] = useState([]); // State to store servers\n  const {\n    waitForAccessToken\n  } = useAuth(); // Access the authentication context\n  const navigate = useNavigate(); // Hook for navigation\n\n  useEffect(() => {\n    const fetchServers = async () => {\n      try {\n        const token = await waitForAccessToken();\n        const response = await axios.get(`${config.apiBaseUrl}/api/category/${categoryId}/server`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log(response.data);\n        setServers(response.data);\n      } catch (error) {\n        console.error('Error fetching servers:', error);\n      }\n    };\n    if (categoryId) {\n      fetchServers(); // Fetch servers when categoryId is available\n    }\n  }, [categoryId, waitForAccessToken]); // Re-run this effect when categoryId changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"servers-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Servers in Category \", categoryId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"server-list\",\n      children: servers.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No servers available in this category.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this) // Show a message if no servers are available\n      : servers.map(server => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"server-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: server.model\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Disk Count: \", server.disk_count]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Generation: \", server.generation]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", server.os]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(`/server/${server.id}`),\n          children: \"View Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this), \" \"]\n      }, server.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(ServersPage, \"9BQuBcE/7vOqr4Wm+10lys/lUTc=\", false, function () {\n  return [useParams, useAuth, useNavigate];\n});\n_c = ServersPage;\nexport default ServersPage;\nvar _c;\n$RefreshReg$(_c, \"ServersPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","axios","config","useAuth","jsxDEV","_jsxDEV","ServersPage","_s","categoryId","servers","setServers","waitForAccessToken","navigate","fetchServers","token","response","get","apiBaseUrl","headers","Authorization","console","log","data","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","server","model","disk_count","generation","os","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/matas/Desktop/Serverland/Frontend/src/pages/ServerPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport config from '../config';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport './ServerPage.css';\r\n\r\nconst ServersPage = () => {\r\n  const { categoryId } = useParams(); // Extract categoryId from the URL\r\n  const [servers, setServers] = useState([]); // State to store servers\r\n  const { waitForAccessToken } = useAuth(); // Access the authentication context\r\n  const navigate = useNavigate(); // Hook for navigation\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchServers = async () => {\r\n      try {\r\n        const token = await waitForAccessToken();\r\n        const response = await axios.get(\r\n          `${config.apiBaseUrl}/api/category/${categoryId}/server`, \r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        );\r\n        console.log(response.data);\r\n        setServers(response.data); \r\n      } catch (error) {\r\n        console.error('Error fetching servers:', error);\r\n      }\r\n    };\r\n\r\n    if (categoryId) {\r\n      fetchServers(); // Fetch servers when categoryId is available\r\n    }\r\n  }, [categoryId, waitForAccessToken]); // Re-run this effect when categoryId changes\r\n\r\n  return (\r\n    <div className=\"servers-page\">\r\n      <h2>Servers in Category {categoryId}</h2>\r\n      <div className=\"server-list\">\r\n        {servers.length === 0 ? (\r\n          <p>No servers available in this category.</p> // Show a message if no servers are available\r\n        ) : (\r\n          servers.map((server) => (\r\n            <div key={server.id} className=\"server-item\">\r\n              <h3>{server.model}</h3>\r\n              <p>Disk Count: {server.disk_count}</p>\r\n              <p>Generation: {server.generation}</p>\r\n              <p>Status: {server.os}</p>\r\n              <button onClick={() => navigate(`/server/${server.id}`)}>View Details</button> {/* Navigate to server detail page */}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ServersPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}